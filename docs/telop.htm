<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="keywords" content="telégrafo, óptico, Mathé, código, mensaje, sistema, transmisión, telecomunicación" />
    <meta name="description" content="Conversor Telégrafo Óptico sistema Mathé" />
    <meta name="viewport" content="width=device-width,initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>Conversor Telégrafo Óptico</title>
    <style>
	body {
	    font-family: "courier new", courier, monospace;
	    margin: 0px;
	    padding: 0px;
	    height: 100%;
	}
	div#content {
	    border-style: none;
	    border-left: dashed #e6e6e6 5px;
	    border-right: dashed #e6e6e6 5px;
	    background: linen;
	    width: 50em;
	    min-height: 100vh;
	    margin: 0px auto 0px auto;
	    text-align: center;
	    font-size: 110%;
	}
	div#title {
	    padding-top: 1.5em;
	    margin-bottom: 1.1em;
	    font-size: 2em;
	}
	div#title a {
	    text-decoration: none;
	}
	div#title img {
	    border: 1px lightgrey solid;
	    width: 90px;
	    margin-right: 0.7em;
	    border-radius: 50%;
	    display: inline-block;
	    vertical-align: middle;
	}
	textarea {
	    color: maroon;
	    height: 6em;
	    padding: 7px;
	    text-align: center;
	    line-height: 1.5;
	    letter-spacing: 1px;
	    box-sizing: border-box;
	}
	div#codops {
	    display: none;
	    margin: 10px auto 15px auto;
	}
	div#codops table {
	    border: none;
	    text-align: left;
	    float: left;
	}
	div#codops select, div#codops input {
	    padding: 2px;
	    margin: 2px;
	}
	div#codops input[type="number"] {
	    width: 5em;
	}
	pre {
	    text-align: left;
	    margin: 1.5em auto 1.5em auto;
	    word-break: normal;
	    overflow-wrap: break-word;
	    white-space: pre-wrap;
	    line-height: 2;
	}
	pre p {
	    font-weight: bold;
	    text-align: center;
	}
	img#transgif{
	    width: 310px;
	    height: 300px;
	    display: none;
	}
	.info {
	    display: inline-block;
	    opacity: 0.7;
	    font-size: small;
	    padding: 1em 0px 1em 0px;
	}
	.info summary  {
	    outline: 0;
	    user-select: none;
	    padding-bottom: 0.5em;
	}
	button {
	    padding: 5px;
	    letter-spacing: 1px;
	    color: #303030;
	}
	div#velocidad {
	    text-align: center;
	    display: none;
	}
	div#desc {
	    text-align: left;
	    font-family: "arial";
	    display: none;
	    font-size: 75%;
	    color: grey;
	    width: 53%;
	    margin-left: auto;
	    float: right;
	}
	div#desc ul{
	    margin-top: 0px;
	    margin-bottom: 0px;
	    padding-inline-start: 20px;
	}
	#opincd, #oprectf { display: none; }
	.info a{ color: maroon; }
	textarea { margin-bottom: 5px; }
	pre, button, textarea, div#codops { width: 85%; }
	span#destgif img{ box-shadow: 0px 10px 6px -6px #777; border: 1px solid #d6d6d6; }

	@media only screen and (max-width: 888px) {
		div#title img {
		    display: block;
		    margin-left: auto;
		    margin-right: auto;
		    margin-bottom: 0.2em;
		}
		div#title {
		    padding-top: 0.5em;
		    margin-bottom: 0.7em;
		    font-size: 1.6em;
		}
		div#content { width: calc(98% - 5px); }
		pre, button, textarea, div#codops { width: 95%; }
		textarea { font-size: 0.9em; }
		div#desc { display: none !important; }
	}
    </style>
</head>

<body>
<div id="content"> 
    <div id="title"><a href="https://rfrail3.github.io/misc/telop.htm"><img src="static/torre.jpg" alt="Telégrafo"></a>Conversor Telégrafo Óptico</div>
    <div id="formulario">
        <textarea id="form1" maxlength="600"></textarea>

        <div id="codops">
            <table>
                <tr>
                    <td>Tipo:</td>
                    <td onmouseover="desc('tipo')" onmouseout="desc()"><select id="mrecep" onchange="txtformat()">
                        <option value="0">0 - Ordinario</option>
                        <option value="2">2 - Serv. Interno</option>
                        <option value="3">3 - Vigilancia</option>
                        <option value="5">5 - Reanudar Trans.</option>
                        <option value="6">6 - Acuse de Recibo</option>
                        <option value="9">9 - Rectificar</option>
                        </select>
                    </td>
                </tr>
                <tr id="opincd">
                    <td>Estado:</td>
                    <td onmouseover="desc('estado')" onmouseout="desc()"><select id="incd">
                        <option value="00">0x - Correcto</option>
                        <option value="1">1 - Incd. niebla</option>
                        <option value="2">2 - Incd. ausencia</option>
                        <option value="3">3 - Incd. vang. ocupada</option>
                        <option value="4">4 - Incd. avería</option>
                        </select>
                    </td>
                </tr>
                <tr id="oprectf">
                    <td>Petición:</td>
                    <td onmouseover="desc('peticion')" onmouseout="desc()"><select id="rectf">
                        <option value="6">6 - Repetir ref.</option>
                        <option value="9">9 - Anular ref.</option>
                        </select>
                    </td>
                </tr>
                <tr id="opprio">
                    <td>Prioridad:</td>
                    <td onmouseover="desc('prioridad')" onmouseout="desc()"><select id="mprio">
                        <option value="0">0 - Normal</option>
                        <option value="4">4 - Urgente</option>
                        <option value="8">8 - Urgent&iacute;simo</option>
                        </select>
                    </td>
                </tr>
                <tr id="optorg">
                    <td>Torre origen:</td>
                    <td><input type="number" id="morig" min="1" max="999" pattern="\d{3}" /></td>
                </tr>
                <tr id="optdst">
                    <td>Torre destino:</td>
                    <td><input type="number" id="mdest" min="1" max="999" pattern="\d{3}" /></td>
                </tr>
                <tr id="ophora">
                    <td>Formato hora:</td>
                    <td onmouseover="desc('hora')" onmouseout="desc()"><select id="mfhora">
                        <option value="0">Normal</option>
                        <option value="1">Reducido</option>
                        </select>
                    </td>
		</tr>
                <tr id="opref">
                    <td onmouseover="desc(innerHTML)" onmouseout="desc()">Referencia:</td>
                    <td><input type="number" id="mref" min="1" max="99" pattern="\d{2}" /></td>
                </tr>
            </table>
            <div id="desc"></div>
        </div>
    <button id="btn1" onclick="procesar()">CONVERTIR</button>
    </div>
    <pre id="salida"></pre>
    <details class="info">
        <summary> más información </summary>
        <div>
            <a target="_blank" title="GitHub telop" href="https://github.com/rfrail3/misc/tree/master/telop">github</a> -
            <a target="_blank" title="Twitter telegrafoptico" href="https://twitter.com/telegrafoptico">twitter</a> -
            <a target="_blank" title="Foro Histórico de las Comunicaciones C.O.I.T." href="https://forohistorico.coit.es/index.php/sendas/tecnologica-en-espana/wiki-telegrafia-optica">fht</a> -
            <a target="_blank" title="Facebook Telegrafía Óptica" href="https://www.facebook.com/TelegrafiaOptica">facebook</a> -
            <a target="_blank" title="Wikipedia Telégrafo Óptico" href="https://es.wikipedia.org/wiki/Tel%C3%A9grafo_%C3%B3ptico">wikipedia</a>
        </div>
    </details>
</div>

    <script src="static/gifshot.js"></script>
    <script>

    function desc(x) {
        if ( x == 'tipo' ) {
            document.getElementById("desc").style.display = "inline-block";
		txt = '\
		 <ul>\
		  <li><b>Ordinario:</b> &nbsp;&nbsp;Mensaje corriente a torre de comandancia.</li>\
		  <li><b>Servicio interno:</b> &nbsp;&nbsp;Mensaje destinado a cualquier torre.</li>\
		  <li><b>Vigilancia:</b> &nbsp;&nbsp;Controlar y mantener la atención sobre la línea.</li>\
		  <li><b>Reanudar transmisión:</b> &nbsp;&nbsp;Retomar la transmisión de un mensaje interrumpido en una torre.</li>\
		  <li><b>Acuse de recibo:</b> &nbsp;&nbsp;Confirmar la recepción de un mensaje junto con el motivo que lo provoca.</li>\
		  <li><b>Rectificar:</b> &nbsp;&nbsp;Solicitar la anulación o retransmisión de un mensaje por su referencia.</li>\
		</ul>';
	} else if ( x == 'estado' ) {
            document.getElementById("desc").style.display = "inline-block";
		txt = '\
		 <ul>\
		  <li><b>Correcto:</b> &nbsp;&nbsp;El mensaje ha sido recepcionado en destino.</li>\
		  <li><b>Incidencia niebla:</b> &nbsp;&nbsp;Interrumpido por niebla a vanguardia.</li>\
		  <li><b>Incidencia ausencia:</b> &nbsp;&nbsp;La vanguardia no responde a los movimientos.</li>\
		  <li><b>Incidencia vanguardia ocupada:</b> &nbsp;&nbsp;La vanguardia se encuentra en funcionamiento.</li>\
		  <li><b>Incidencia avería:</b> &nbsp;&nbsp;Problema técnico que impide la transmisión.</li>\
		</ul>';
	} else if ( x == 'peticion' ) {
            document.getElementById("desc").style.display = "inline-block";
		txt = '\
		 <ul>\
		  <li><b>Repetir referencia:</b> &nbsp;&nbsp;Solicitar repetición del mensaje con referencia indicada.</li>\
		  <li><b>Anular referencia:</b> &nbsp;&nbsp;Petición para anular mensaje con referencia indicada.</li>\
		</ul>';
	} else if ( x == 'prioridad' ) {
            document.getElementById("desc").style.display = "inline-block";
		txt = '\
		 <ul>\
		  <li><b>Normal:</b> &nbsp;&nbsp;Transmisión habitual.</li>\
		  <li><b>Urgente:</b> &nbsp;&nbsp;Con precedencia de paso sobre normal.</li>\
		  <li><b>Urgentísimo:</b> &nbsp;&nbsp;Tiene máxima precedencia sobre el resto.</li>\
		</ul>';
	} else if ( x == 'hora' ) {
            document.getElementById("desc").style.display = "inline-block";
		txt = '\
		 <ul>\
		  <li><b>Normal:</b> &nbsp;&nbsp;Indicación habitual con hora, minutos y día.</li>\
		  <li><b>Reducido:</b> &nbsp;&nbsp;Fórmula para acortar redondeando los minutos al cuarto de hora.</li>\
		</ul>';
	} else {
           document.getElementById("desc").style.display = "none";
	}
        document.getElementById('desc').innerHTML = txt;
    }

    function txtformat() {

            // Tachar texto
            if (['0','2','7','9'].indexOf(document.getElementById("mrecep").options[mrecep.selectedIndex].value) > -1) {
                document.getElementById("form1").style.textDecoration = "none";
            } else {
                document.getElementById("form1").style.textDecoration = "line-through";
            }

            // Resetear valores que se van a modificar
            document.getElementById("ophora").style.display = "table-row";
            document.getElementById("optdst").style.display = "table-row";
            document.getElementById("opprio").style.display = "table-row";
            document.getElementById("opref").style.display = "table-row";
            document.getElementById("opincd").style.display = "none";
            document.getElementById("oprectf").style.display = "none";

            // Mostrar opciones de vigilancia
            if ( document.getElementById("mrecep").options[mrecep.selectedIndex].value == 3 ) {
                document.getElementById("opprio").style.display = "none";
                document.getElementById("opref").style.display = "none";
            }
            // Mostrar opciones Reanudar
            if ( document.getElementById("mrecep").options[mrecep.selectedIndex].value == 5 ) {
                document.getElementById("ophora").style.display = "none";
                document.getElementById("optdst").style.display = "none";
            }
            // Mostrar opciones Acuse Recibo
            if ( document.getElementById("mrecep").options[mrecep.selectedIndex].value == 6 ) {
                document.getElementById("opincd").style.display = "table-row";
            }
            // Mostrar opciones Rectificar
            if ( document.getElementById("mrecep").options[mrecep.selectedIndex].value == 9 ) {
                document.getElementById("oprectf").style.display = "table-row";
                document.getElementById("opprio").style.display = "none";
                document.getElementById("ophora").style.display = "none";
            }
    }


    function codificar_ops(msg, lencript) {
        console.log('Codificar Opciones');

        function selectElement(id, valueToSelect) {
            let element = document.getElementById(id);
            element.value = valueToSelect;
        }

        var prioridades = ['0','4','8'];
        var destinos = ['18','27','36','50','52'];

        selectElement('mprio', prioridades[Math.floor(Math.random() * prioridades.length)]);
        selectElement('morig', '1');
        selectElement('mdest', (destinos[Math.floor(Math.random() * destinos.length)]));
        selectElement('mref', (Math.floor(Math.random() * 99) + 1));

        document.getElementById("codops").style.display = "flex";
        document.querySelector('pre#salida').innerHTML = '';
    }

    
    function codificar(msg, lencript) {
        console.log('Codificar');

        var d = new Date();
        msg['tipo'] = document.getElementById("mrecep").options[mrecep.selectedIndex].value;
        msg['prioridad'] = document.getElementById("mprio").value;
        msg['origen'] = document.getElementById("morig").value.toString().substring(0,3).padStart(3, '0');
        msg['destino'] = document.getElementById("mdest").value.toString().substring(0,3).padStart(3, '0');
        msg['referencia'] = document.getElementById("mref").value.toString().substring(0,2).padStart(2, '0');
        msg['incd'] = document.getElementById("incd").value;
        msg['rectf'] = document.getElementById("rectf").value;
        msg['mfhora'] = document.getElementById("mfhora").value;
        if (msg['mfhora'] == 1) {
            fchora = parseInt(d.getHours());
            fcmin = parseInt(d.getMinutes());
            switch (true) {
                case fcmin >= 45:
                    fchora =+ fchora + 75; break;
                case fcmin >= 30:
                    fchora =+ fchora + 50; break;
                case fcmin >= 15:
                    fchora =+ fchora + 25;
            }

            fchora = fchora.toString().padStart(2, '0');
            fcdia = d.getDate().toString().slice(-1);

            msg['horadia'] = fchora + fcdia;
        } else {
            msg['horadia'] = d.getHours().toString().padStart(2, '0') + d.getMinutes().toString().padStart(2, '0') + d.getDate().toString().padStart(2, '0');
        }

        switch (msg['tipo']) {
            case '0':
            case '2':  // Servicio ordinario o interno
                // Recorrer los digitos del mensaje para codificar cada uno
                var cipert = '';
                for (let i = 0; i < msg['mensaje'].length; i++) {
                    let elem = msg['mensaje'][i];
                    if (!lencript.includes(elem)) {  // si el carácter no se encuentra en la lista
                        elem = elem.normalize('NFKD').replace(/[^\w]/g, '');  // pasar a unicode, quita acentos y similar
                        if (!lencript.includes(elem)) {  // finalmente sustituir por '#' si no existe
                            elem = '#';
                        }
                    }
                    // Asignar valor de la posicion del caracter, siempre con dos digitos '00'
                    cipert += lencript.indexOf(elem).toString().padStart(2, '0');
                }
                console.log('Texto cod: ' + cipert);
        
                // Calcular novenales en base al tamaño del mensaje
                var cociente = Math.floor(cipert.length / 9);
                var resto = Math.floor(cipert.length % 9);
                msg['novenales'] = cociente.toString().padStart(2, '0') + resto.toString();
        
                // Insertar arriadas en mensaje y borar la última si coincide
                ciperm = cipert.replace(/(.{9})/g, "$1/").replace(/\/$/, '');
        
                var prefijo = ''
                if (msg['tipo'] == '2') {
                    prefijo = '2/'
                }

                var sufijo = '/' + msg['novenales'] + "/" + ciperm + "/" + msg['prioridad'];
                break;

            case '3':  // Servicio de vigilancia
                var prefijo = msg['tipo'] + '/';
                msg['prioridad'] = '';
                msg['referencia'] = '';
                sufijo = '';
                break;

            case '6':  // Servicio de acuse de recibo
                var prefijo = msg['tipo'] + '/';
                sufijo = '/' + msg['incd'];
                break;

            case '5':  // Reanudar transmisión
                var prefijo = msg['tipo'] + '/';
                msg['horadia'] = '';
                msg['destino'] = '0';
                sufijo = '';
                break;

            case '9':  // Servicio de rectificación
                var prefijo = msg['tipo'] + '/';
                msg['prioridad'] = '';
                msg['horadia'] = '';
                sufijo = '/' + msg['rectf'];
                break;
        }

	// Destino 0 deja torre origen como indicación única
        if (parseInt(msg['destino'], 10) == 0) {
            msg['destino'] = ''; 
        }

        // Mensaje formateado
        var msgfmt = prefijo + msg['prioridad'] + "/" + msg['origen'] + msg['destino'] + "/" + msg['horadia'] + msg['referencia'] + sufijo;

        // Eliminar duplicados // por campos vacíos
        msgfmt = msgfmt.replace(/\/\//g, "/");

        console.log('Mensaje raw: ' + msgfmt);
        console.log('Mensaje txt: "' + msg['mensaje'] + '\"');

        // Salida final. Sustituir caracteres reptidos por x
        msg['procmsg'] = msgfmt.replace(/(\w{1})\1/g, "$1x");

        imprimir(msg);
    }


    function descodificar(msg, lencript) {
        console.log('Descodificar');

        // Ocultar opciones parámetros y limpiar formato caja texto
        document.getElementById("codops").style.display = "none";
        document.getElementById("form1").style.textDecoration = "none";

        // Reconstruir caracteres repetidos
        ciperm = msg['mensaje'].replace(/(.{1})x/g, "$1$1");

        // Extraer interrupción final si la hubiera
	if ((/.*\/\d+\/\d+(\/(\d{3})\/(\d{5}))+$/g).test(ciperm)) {
            regfin = (/(\/(\d{3})\/(\d{5}))+$/g).exec(ciperm);

            // Recorrer todas las interrupciones
            msg['regfin'] = '';
            for (i of regfin[0].matchAll('.{10}')) {

                regint = (/\/(\d{3})\/(\d{5})/g).exec(i);
                msg['regfin'] += '[T-' + regint[1] + ' ';
                msg['regfin'] += regint[2].substring(0,2) + ':' + regint[2].substring(2,4) + 'h ';
                intrc = regint[2].substring(4)
                switch (intrc) {
                    case '1': intrc = '1-Niebla'; break;
                    case '2': intrc = '2-Ausencia'; break;
                    case '3': intrc = '3-Vang.Ocupada'; break;
                    case '4': intrc = '4-Avería';
                }
                msg['regfin'] += intrc + ']  ';

                // Eliminar interrupción del mensaje
                ciperm = ciperm.replace(regint[0], "");
            }
	}

        try {

            // Procesar tipo 0 o 2. Telegrama con mensaje
            if ((/^(2)?\/?([048])\/(\d{2,6})\/(\d{2,8})\/(\d{0,3})\b/g).test(ciperm)) {
	        search = (/^(2)?\/?([048])\/(\d{2,6})\/(\d{2,8})\/(\d{0,3})\b/g).exec(ciperm);

                msg['novenales'] = search[5];

                // Calcular tamaño del texto en base a los novenales
                let long_nov = (parseInt(msg['novenales'].substring(0,2)) * 9) + (parseInt(msg['novenales'].substring(2)));

                // Eliminar la cabecera del preámbulo del telegrama y extraer longitud del texto
                cipert = ciperm.replace(search[0], '').replace(/\//g, '').substring(0, long_nov);

                console.log("Mensaje raw: " + cipert);

                // Comprobar integridad
                if (long_nov != cipert.length) {
                    msg['procmsg'] = 'ERROR - Extensión mensaje incorrecta'

                } else {
                    // Recorrer a pares el texto y extraer la posición del carácter en la lista de códigos
                    msg['procmsg'] = '';
                    for (let i=0; i < long_nov - 1; i+=2) {
                        let posicion = (cipert[i] + cipert[(i + 1)]);
                        msg['procmsg'] += lencript[parseInt(posicion)];
                    }
                }

                // Asignar tipo según indicación
                if (search[1]) {
                    msg['tipo'] = search[1]
                } else {
                    msg['tipo'] = '0'
                }

            // Procesar tipo 3
            } else if ((/^(3)()\/(\d{2,6})\/(\d{3,6})()\b/).test(ciperm)) {
	        search = (/^(3)()\/(\d{2,6})\/(\d{3,6})()\b/g).exec(ciperm);
                msg['tipo'] = search[1];

            // Procesar tipo 5
            } else if ((/^(5)\/([048])\/(\d{2,3})\/(\d{2})()\b/).test(ciperm)) {
	        search = (/^(5)\/([048])\/(\d{2,3})\/(\d{2})()\b/g).exec(ciperm);
                msg['tipo'] = search[1]

            // Procesar tipo 6
            } else if ((/^(6)\/([048])\/(\d{2,6})\/(\d{2,8})\/(\d{1,2})\b/).test(ciperm)) {
	        search = (/^(6)\/([048])\/(\d{2,6})\/(\d{2,8})\/(\d{1,2})\b/g).exec(ciperm);
                msg['tipo'] = search[1];
                msg['incd'] = search[5];

            // Procesar tipo 9
            } else if ((/^(9)()\/(\d{2,6})\/(\d{2})\/([69])\b/).test(ciperm)) {
	        search = (/^(9)()\/(\d{2,6})\/(\d{2})\/([69])\b/g).exec(ciperm);
                msg['tipo'] = search[1]
                msg['rectf'] = search[5]

            } else {
                throw "ERROR - Formato de mensaje inválido";
            }

            // Asignar valores comunes
            msg['prioridad'] = search[2];

	    // Según nº torre o comandancia
	    if ([2,4].indexOf(search[3].length) > -1) {
                msg['origen'] = search[3].substring(0,2);
                msg['destino'] = search[3].substring(2);
	    } else if ([3,6].indexOf(search[3].length) > -1) {
                msg['origen'] = search[3].substring(0,3);
                msg['destino'] = search[3].substring(3);
	    } else {
                msg['origen'] = '';
                msg['destino'] = '';
	    }

            // Según formato y referencia hora corto/largo
	    if (search[4].length == 2) {
                msg['horadia'] = '';
                msg['referencia'] = search[4];
	    } else if (search[4].length == 3) {
                msg['horadia'] = search[4].substring(0,3);
                msg['referencia'] = '';
	    } else if (search[4].length == 5) {
                msg['horadia'] = search[4].substring(0,3);
                msg['referencia'] = search[4].substring(3);
	    } else if (search[4].length == 6) {
                msg['horadia'] = search[4].substring(0,6);
                msg['referencia'] = '';
            } else if (search[4].length == 8) {
                msg['horadia'] = search[4].substring(0,6);
                msg['referencia'] = search[4].substring(6);
            } else {
                msg['horadia'] = '';
                msg['referencia'] = '';
            }

        // Recoger error
        } catch (excp) {
            msg['procmsg'] = excp;
            msg['tipo'] = msg['prioridad'] = '0';
            msg['origen'] = msg['destino'] = msg['novenales'] = '000';
            msg['horadia'] = '000000';
            msg['referencia'] = msg['incd'] = '00';
        }
        imprimir(msg);
    }


    function imprimir(msg) {

        var salida = '<hr>';

        switch (msg['tipo']) {
            case '0': salida += "<i>Tipo:</i>\t\t 0 - Ordinario<br>"; break;
            case '2': salida += "<i>Tipo:</i>\t\t 2 - Servicio Interno<br>"; break;
            case '3': salida += "<i>Tipo:</i>\t\t 3 - Vigilancia<br>"; break;
            case '5': salida += "<i>Tipo:</i>\t\t 5 - Reanudar transmisión<br>"; break;
            case '6': salida += "<i>Tipo:</i>\t\t 6 - Acuse de recibo<br>";
                switch (msg['incd']) {
                    case '00':
                        salida += "<i>Estado:</i>\t\t 0x - Correcto<br>"; break;
                    case '1':
                        salida += "<i>Estado:</i>\t\t 1 - Incidencia niebla<br>"; break;
                    case '2':
                        salida += "<i>Estado:</i>\t\t 2 - Incidencia ausencia<br>"; break;
                    case '3':
                        salida += "<i>Estado:</i>\t\t 3 - Incidencia vanguardia ocupada<br>"; break;
                    case '4':
                        salida += "<i>Estado:</i>\t\t 4 - Incidencia avería<br>"; 
               }; break;
            case '9': salida += "<i>Tipo:</i>\t\t 9 - Rectificar<br>";
                switch (msg['rectf']) {
                    case '6':
                        salida += "<i>Petición:</i>\t 6 - Repetir referencia<br>"; break;
                    case '9':
                        salida += "<i>Petición:</i>\t 9 - Anular referencia<br>"; break;
               }; break;
         }

        if (msg['prioridad']) {
            salida += "<i>Prioridad:</i>\t " + msg['prioridad'] + "<br>";
        }
        if (!msg['destino']) {  // Si sólo se indica una torre
	    if (msg['origen'].length == 3) {
                salida += "<i>Torre:</i>\t\t " + msg['origen'] + "<br>";
	    } else if (msg['origen'].length == 2) {
                salida += "<i>Comandancia:</i>\t " + msg['origen'] + "<br>";
	    }
        } else {
	    if ((msg['origen'] + msg['destino']).length == 6) {
                salida += "<i>Torre origen:</i>\t " + msg['origen'] + "<br>";
                salida += "<i>Torre destino:</i>\t " + msg['destino'] + "<br>";
	    } else if ((msg['origen'] + msg['destino']).length == 4) {
                salida += "<i>Com. origen:</i>\t " + msg['origen'] + "<br>";
                salida += "<i>Com. destino:</i>\t " + msg['destino'] + "<br>";
	    }
        }

        if (msg['horadia'].length == 3) {
            var d = new Date();
            fchora = parseInt(msg['horadia'].substring(0,2));
            salida += "<i>Hora y Día:</i>\t " + msg['horadia'].substring(0,2) + ' [';
            switch (true) {
                case fchora >= 75:
		    salida += (fchora - 75).toString().padStart(2, '0') + ':45'; break;
                case fchora >= 50:
		    salida += (fchora - 50).toString().padStart(2, '0') + ':30'; break;
                case fchora >= 25:
		    salida += (fchora - 25).toString().padStart(2, '0') + ':15'; break;
                case fchora >= 0:
		    salida += fchora.toString().padStart(2, '0') + ':00'; 
            }
	    salida += "] ?" + msg['horadia'].substring(2,3) + "<br>";
        } else if (msg['horadia'].length == 6) {
            salida += "<i>Hora y Día:</i>\t " + msg['horadia'].substring(0,2) + ':' + msg['horadia'].substring(2,4) + ' ' + msg['horadia'].substring(4,6) + "<br>";
        }

        if (msg['referencia']) {
            salida += "<i>Referencia:</i>\t " + msg['referencia'] + "<br>";
        }

        if (msg['regfin']) {
            salida += "<i>Interrupción:</i>\t " + msg['regfin'] + "<br>";
        }

        if (msg['procmsg']) {
            if ((msg['tipo'] == '0') || (msg['tipo'] == '2')) {
                salida += "<i>Novenales:</i>\t " + msg['novenales'].substring(0,2) + '.' + msg['novenales'].substring(2) + "<br>";
            }
            salida += "<i>Mensaje:</i>\t &#8628;<hr><p id='procmsg'>" + msg['procmsg'] + '</p>';
        }
        if (!(/^ERROR/g).test(msg['procmsg']) && (/^\d\/(.+?)\/(.+?)/).test(msg['procmsg'])) {
            salida += "<hr><p>";
            salida += "<button id='btn2' onclick='gengif()'>&nbsp;&nbsp;Generar GIF Transmisión&nbsp;&nbsp;</button>";
            salida += "<span id='destgif'><img id='transgif' src='data:,'></span>";
            salida += "<div id='velocidad'>velocidad: <select id='velo' onchange='gengif()()'>";
            salida += "<option value='15'>1 / 15 seg. (real)</option>";
            salida += "<option value='10'>1 / 10 seg.</option>";
            salida += "<option value='5' selected>1 / 5 seg.</option>";
            salida += "<option value='1'>1 / 1 seg.</option></select></div></p>";
        }
        salida += '<hr>';

        document.querySelector('pre#salida').innerHTML = salida;
    }


    function gengif() {

        // Ocultar botón y mostrar loading
        document.getElementById("btn2").style.display = "none";
        document.getElementById("transgif").setAttribute("src", "static/loading.gif");
        document.getElementById("transgif").style.display = "inline-block";
        document.getElementById("transgif").scrollIntoView();

        // Recoger velocidad
        velo = document.getElementById("velo").value;

        // Recoger texto mensaje
        var codtxt = document.getElementById("procmsg").innerHTML.toLowerCase();

        // Validar, sustituir '/' por 'a' y error en 'e'
        codtxt = codtxt.replace(/\//g, 'a').replace(/[^0-9,x,m,a]/gi, 'e');
        // Sustituir reanudar transmisión '7a' por 'fa' y '9a' por 'ia'
        codtxt = codtxt.replace(/^7a/g, 'fa').replace(/^9a/g, 'ia');
        if (codtxt.length == 0) { codtxt = 'e'; };

        console.log('A gif: ' + codtxt);

        var lista = [];
        for (let i = 0; i < codtxt.length; i++) {
            //lista.push('static/' + codtxt[i] + '.gif');
            lista.push({src:"static/" + codtxt[i] + ".gif", text:(i + 1) + "/" + codtxt.length + " "});
        }

        gifshot.createGIF({
            gifWidth: 310,
            gifHeight: 300,
            images: lista,
            interval: velo,
            numFrames: 1,
            frameDuration: 1,
            sampleInterval: 10,
            fontColor: 'grey',
            textAlign: 'right',
            textBaseline: 'top',
            fontSize: '14px',
            fontFamily: 'monospace',
            numWorkers: 2
        }, function (obj) {
            if (!obj.error) {
                // Sustituir loading por gif final
                document.getElementById("transgif").setAttribute("src", obj.image);
                document.getElementById("velocidad").style.display = "block";
                //var image = obj.image, animatedImage = document.createElement('img');
                //animatedImage.src = image;
                //document.getElementById("destgif").appendChild(animatedImage);
            }
        });
    }


    function procesar() {

        var msg = {}; // Diccionario de mensaje
        msg['mensaje'] = document.querySelector('textarea#form1').value;  // Asignar entrada
        if (!msg['mensaje']){
             msg['mensaje'] = '...'
        }
        msg['mensaje'] = msg['mensaje'].replace(/(\r\n|\n|\r)/gm, " ").replace(/[\&\<\>\`]/gm, '#').trim();  // Limpiar /n, html tags y espacios
        var lencript = ['0','1','2','3','4','5','6','7','8','9',
                'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',
                'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
                '!','"','#','$','%','&',"'",'(',')','*','+',',','-','.','/',':',';','<','=','>','?','@','[','\\',']','^','_','`','{','|','}','~',
                'Ñ','ñ','¿',' ','€',' '];  // Los caracteres del mensaje se sustituyen por la posición que ocupan en la lista

        // Asignar descodificación / codificación automaticamente. Si comienza por ~ */*/* -> descodificar
        if ((/^\d\/(.+?)\/(.+?)/).test(msg['mensaje'])) {
            descodificar(msg, lencript);
        } else {
            if (msg['mensaje'].length > 250) {
                document.querySelector('pre#salida').innerHTML = '<hr><p>ERROR - Mensaje mayor de 250 caracteres</p><hr>';
            } else {
                if (document.getElementById("codops").style.display == 'flex') {
                    codificar(msg, lencript);
                } else {
                    codificar_ops(msg, lencript);
                }
            }
        }
    }

    </script>
</body>
</html>
