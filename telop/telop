#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse, string, time, re, logging, sys, unidecode

# Tamaño máximo de texto a codificar
MAX_TXT = 250

def get_arguments(msg, lencript):
    '''obtener argumentos'''

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--prioridad', default=msg['prioridad'], action='store', type=str, choices=['0', '4', '8'], help='prioridad -> 0 ordinario | 4 urgente | 8 urgentísimo')
    parser.add_argument('-t', '--tipo', default=msg['tipo'], action='store', type=str, choices=['0', '3', '6'], help='tipo de indicación -> 3 vigilancia | 6 recepción')
    parser.add_argument('-o', '--origen', default=msg['origen'], action='store', type=int, metavar='origen', help='torre de origen')
    parser.add_argument('-d', '--destino', default=msg['destino'], action='store', type=int, metavar='destino', help='torre de destino')
    parser.add_argument('--diccionario', default=None, action='store_true', help='mostrar diccionario codificación')
    parser.add_argument('-r', '--referencia', default=msg['referencia'], action='store', type=int, metavar='referencia', help='nº referencia despacho')
    parser.add_argument('-m', '--mensaje', default=msg['mensaje'], action='store', type=str, help='texto del mensaje entre \' \'')
    parser.add_argument('--batch', default=False, action='store_true', help='sólo imprime mensaje resultante')
    parser.add_argument('-v', '--verbose', default=False, action='store_true', help='debug')
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    parser.add_argument('-z', dest='zcodif', default=None, type=int, choices=[0, 1], help='servicio a ejecutar -> (auto) | 0 codificar | 1 descodificar')

    arg = parser.parse_args()

    if arg.verbose:
        logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)

    logging.info('Argumentos raw:\t %s', str(vars(arg)))

    if arg.diccionario:
        print('-' * 10)
        print('Nº - Valor')
        print('-' * 10)
        for pos, val in enumerate(lencript):  # Siempre < 100
            print(f'{str(pos).zfill(2)} - {val}')
        sys.exit(0)

    # Asignar descodificación / codificación automaticamente. Si comienza por ~ */*/* -> descodificar
    if arg.zcodif is None:
        if re.match(r'^\d/(.+?)/(.+?)', arg.mensaje) is None:
            arg.zcodif = 0
            logging.info('Auto codificar = 0')
        else:
            arg.zcodif = 1
            logging.info('Auto descodificar = 1')

    # En codificacion, comprobar requisitos y eliminar new line siempre
    if arg.zcodif == 0:
        if arg.mensaje and len(arg.mensaje) > MAX_TXT:
            logging.warning('Mensaje demasiado grande. Acortado a %s caracteres', str(MAX_TXT))
            arg.mensaje = arg.mensaje[:MAX_TXT]
    arg.mensaje = arg.mensaje.replace('\n', ' ').strip()

    # Asignar los valores de los argumentos como strings
    for key in vars(arg):
        msg[key] = str(vars(arg)[key])

    # Rellenar hora y dia
    msg['horadia'] = str(time.strftime("%H%M%d"))

    # Unificar con ceros. 3 para origen y destino. 2 para referencia
    msg['origen'] = msg['origen'][:3].zfill(3)
    msg['destino'] = msg['destino'][:3].zfill(3)
    msg['referencia'] = msg['referencia'].zfill(2)

    logging.info('Argumentos txt:\t %s', str(msg))

    return arg, msg


def zcodif_codificar(arg, msg, lencript):
    '''codificar mensaje'''

    if msg['tipo'] == '0':  # Sin tipo, mensaje ordinario

        logging.info('Texto raw:\t\t %s', str(msg['mensaje']))

        # Recorrer los digitos del mensaje para codificar cada uno
        codmsg = ''
        for _, elem in enumerate(msg['mensaje']):
            if elem not in lencript:  # si el carácter no se encuentra en la lista
                elem = unidecode.unidecode(elem)  # pasar a unicode, quita acentos y similar
                if elem not in lencript:  #  finalmente si sigue sin encontrarlo, lo sustituye por #
                    elem = '#'

            # Asignar valor de la posicion del caracter, siempre con dos digitos '00'
            codmsg += str(lencript.index(elem)).zfill(2)

        logging.info('Texto cod:\t\t %s', str(codmsg))

        # Calcular novenales en base al tamaño del mensaje
        cociente = int(len(codmsg) / 9)
        resto = int(len(codmsg) % 9)
        msg['novenales'] = str(cociente).zfill(2) + str(resto)

        # Insertar arriadas en mensaje y borar la última si coincide
        codmsg = str(re.sub(r'(.{9})', r'\1/', codmsg)).rstrip('/')

        prefijo = ''
        sufijo = msg['novenales'] + '/' + codmsg + '/' + msg['prioridad']

    else:
        prefijo = msg['tipo'] + '/'

        if msg['tipo'] == '3':  # Control
            # 3/0/0x1052/1917090x/0
            sufijo = msg['prioridad']

        elif msg['tipo'] == '6':  # Acuse
            # 6/0/0x1052/1917090x/0x
            sufijo = '0x'

        else:
            logging.error('Sin tipo de mensaje')
            sys.exit(-1)

    # Mensaje formateado
    msgfmt = str(prefijo + msg['prioridad'] + '/' + msg['origen'] + msg['destino'] + '/' + msg['horadia'] + msg['referencia'] + '/' + sufijo)

    logging.info('Mensaje raw:\t %s', msgfmt)

    # Salida final. Sustituir caracteres repteidos por x
    msg['codmensaje'] = re.sub(r'(\w{1})\1', r'\1x', msgfmt)

    imprimir(arg, msg)



def zcodif_descodificar(arg, msg, lencript):
    '''descodificar mensaje'''

    # Reconstruir caracteres repteidos
    codmsg = re.sub(r'(.{1})x', r'\1\1', msg['mensaje']).replace(" ", "")

    try:
        # Extraer cabecera del mensaje - https://regex101.com/r/uukkZ9/2
        search = re.search(r'^([36])?/?(\d)/(.+?)/(.+?)/(.{0,3})', codmsg)

        # Procesar tipo 0 . Telegrama con mensaje
        if re.match(r'^[048]/.{6}/', codmsg) is not None:
            # 0/0x10x5/232x040x/006/757575/0
    
            # Calcular tamaño del texto en base a los novenales
            long_nov = (int(search.group(5)[:2]) * 9) + (int(search.group(5)[2:]))
    
            # Eliminar la cabecera del preámbulo del telegrama, quitar '/' y extraer longitud del texto
            codmsg = codmsg.replace(search.group(0), '').replace('/', '')[:long_nov]
    
            logging.info("Mensaje raw:\t %s", codmsg)
    
            # Recorrer a pares el texto y extraer la posición del carácter en la lista de códigos
            msg['codmensaje'] = ''
            for i, k in zip(codmsg[0::2], codmsg[1::2]):
                #msg['codmensaje'] += msg['codmensaje'].join(lencript[int(i + k)])
                msg['codmensaje'] += lencript[int(i + k)]

        # Procesar tipo 3 o 6
        elif re.match(r'^[36]/\d/', codmsg) is not None:
            msg['codmensaje'] = None

        else:
            raise Exception('Tipo de mensaje sin identificar')
    
        # Asignar valores
        if search.group(1):
            msg['tipo'] = search.group(1)
        else:
            msg['tipo'] = '0'
        msg['prioridad'] = search.group(2)
        msg['origen'] = search.group(3)[:3]
        msg['destino'] = search.group(3)[3:]
        msg['horadia'] = search.group(4)[:6]
        msg['referencia'] = search.group(4)[6:]
        msg['novenales'] = search.group(5)

    except Exception as exp:
        logging.error('Formato de mensaje incorrecto --> %s', str(exp))
        sys.exit(-1)

    imprimir(arg, msg)



def imprimir(arg, msg):
    '''salida por pantalla'''

    if arg.batch:
        print(msg['codmensaje'])

    else:
        print('-' * 80)
        if msg['tipo'] == '0':
            print(f"Tipo:\t\t 0 Telegrama ordinario")
        if msg['tipo'] == '3':
            print(f"Tipo:\t\t 3 Control")
        if msg['tipo'] == '6':
            print(f"Tipo:\t\t 6 Acuse de recibo")
        print(f"Prioridad:\t {msg['prioridad']}")
        print(f"Origen:\t\t {msg['origen']}")
        print(f"Destino:\t {msg['destino']}")
        print(f"Día y Hora:\t {msg['horadia'][4:6]} {msg['horadia'][:2]}:{msg['horadia'][2:4]}")
        print(f"Referencia:\t {msg['referencia']}")
        if msg['codmensaje'] is not None:
            if msg['tipo'] == '0':
                print(f"Novenales:\t {msg['novenales'][:2]}.{msg['novenales'][2:]}")
                if arg.zcodif == 0:  # Sólo en codificación
                    print(f"Mensaje txt:\t \'{msg['mensaje']}\'")
            print('-' * 80)
            print('')
            print(f"Mensaje:\t {msg['codmensaje']}")
            print('')
        print('-' * 80)



def main():
    '''Inicio'''

    # Los caracteres del mensaje se sustituyen por la posición que ocupan en la lista
    lencript = list(string.digits + string.ascii_letters + string.punctuation) + ['Ñ', 'ñ', '¿', ' ']

    # Diccionario de mensaje. Valores por defecto
    msg = {'prioridad': '0', 'tipo': '0', 'origen': 1, 'destino': 52, 'horadia': None, 'referencia': 0, 'novenales': '000', 'mensaje': '...', 'codmensaje': None}

    arg, msg = get_arguments(msg, lencript)

    if arg.zcodif == 0:
        zcodif_codificar(arg, msg, lencript)
    elif arg.zcodif == 1:
        zcodif_descodificar(arg, msg, lencript)
    else:
        logging.error('Fallo en la selección de tarea. Codificar / Descodificar')


if __name__ == "__main__":
    main()
