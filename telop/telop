#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""telop - Codifica y descodifica mensajes telegráficos del sistema Mathé"""
# Copyright (C) 2021 - Ricardo F.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse, string, time, re, logging, sys, unicodedata, random

# Tamaño máximo de texto a codificar
MAX_TXT = 250

def get_arguments(msg, lencript):
    '''obtener argumentos'''

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--prioridad', default=msg['prioridad'], action='store', type=str, choices=['0', '4', '8'],
                        help='prioridad -> 0-normal | 4-urgente | 8-urgentísimo')
    parser.add_argument('-t', '--tipo', default=msg['tipo'], action='store', type=str, choices=['0', '2', '3', '5', '6'],
                        help='tipo de servicio -> 0-ordinaro | 2-interno | 3-vigilancia | 5-reanudar transmisión | 6-acuse recibo')
    parser.add_argument('--incd', default=msg['incd'], action='store', type=str, choices=['0', '1', '2', '3', '4'],
                        help='incidencia en acuse -> 1-niebla | 2-ausencia | 3-ocupada | 4-avería')
    parser.add_argument('-o', '--origen', default=msg['origen'], action='store', type=int, metavar='origen', help='torre de origen')
    parser.add_argument('-d', '--destino', default=msg['destino'], action='store', type=int, metavar='destino', help='torre de destino')
    parser.add_argument('-b', '--breve', default=False, action='store_true', help='formato fecha y hora reducido')
    parser.add_argument('--diccionario', default=None, action='store_true', help='mostrar diccionario codificación')
    parser.add_argument('--password', default=None, action='store', help='Codificar mensaje con contraseña')
    parser.add_argument('-r', '--referencia', default=msg['referencia'], action='store', type=int, metavar='referencia', help='nº referencia despacho')
    parser.add_argument('-m', '--mensaje', default=msg['mensaje'], action='store', type=str, help='texto del mensaje entre \' \'')
    parser.add_argument('--batch', default=False, action='store_true', help='sólo imprime mensaje resultante')
    parser.add_argument('-v', '--verbose', default=False, action='store_true', help='debug')
    parser.add_argument('--version', action='version', version='%(prog)s 2')
    parser.add_argument('-z', dest='zcodif', default=None, type=int, choices=[0, 1], help='proceso a ejecutar -> (auto) | 0-codificar | 1-descodificar')

    arg = parser.parse_args()

    if arg.verbose:
        logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)

    logging.info('Argumentos raw:\t %s', str(vars(arg)))

    if arg.diccionario:
        print('-' * 10)
        print('Nº - Valor')
        print('-' * 10)
        for pos, val in enumerate(lencript):  # Siempre < 100
            print(f'{str(pos).zfill(2)} - {val}')
        sys.exit(0)

    # Asignar descodificación / codificación automaticamente. Si comienza por ~ */*/* -> descodificar
    if arg.zcodif is None:
        if re.match(r'^\d/(.+?)/(.+?)', arg.mensaje) is None:
            arg.zcodif = 0
            logging.info('Auto codificar = 0')
        else:
            arg.zcodif = 1
            logging.info('Auto descodificar = 1')

    # En codificacion, comprobar requisitos y eliminar new line siempre
    if arg.zcodif == 0:
        if arg.mensaje and len(arg.mensaje) > MAX_TXT:
            logging.warning('Mensaje demasiado grande. Acortado a %s caracteres', str(MAX_TXT))
            arg.mensaje = arg.mensaje[:MAX_TXT]
    arg.mensaje = arg.mensaje.replace('\n', ' ').strip()

    # Asignar los valores de los argumentos como strings
    for key in vars(arg):
        msg[key] = str(vars(arg)[key])

    # Rellenar hora y dia según formato
    if arg.breve:
        fchora = int(time.strftime("%H"))
        fcmin = int(time.strftime("%M"))
        if fcmin >= 45:
            fchora = fchora + 75
        elif fcmin >= 30:
            fchora = fchora + 50
        elif fcmin >= 15:
            fchora = fchora + 25

        fchora = str(fchora).zfill(2)
        fcdia = str(time.strftime("%d")[-1])

        msg['horadia'] = fchora + fcdia
    else:
        msg['horadia'] = str(time.strftime("%H%M%d"))

    # Unificar con ceros. 3 para origen y destino. 2 para referencia
    msg['origen'] = msg['origen'][:3].zfill(3)
    msg['destino'] = msg['destino'][:3].zfill(3)
    msg['referencia'] = msg['referencia'][:2].zfill(2)

    logging.info('Argumentos txt:\t %s', str(msg))

    return arg, msg


def encffx(arg, ciphert, tipo=False):
    '''codificar ffx'''

    try:
        import pyffx
    except Exception as exp:
        logging.error('--password no se puede aplicar. Comprobar módulo "pyffx" --> %s', str(exp))
        return(ciphert)

    # Pedir contraseña en el prompt si se pasa 'ask' como clave
    if arg.password == 'ask':
        arg.password = input("Password?: ")

    effx = pyffx.Integer(arg.password.encode('utf_8'), length=len(ciphert))

    if tipo == 'cod':
        return(str(effx.encrypt(ciphert)))
    elif tipo == 'descod':
        return(str(effx.decrypt(ciphert)))
    else:
        return(ciphert)


def zcodif_codificar(arg, msg, lencript):
    '''codificar mensaje'''

    if msg['tipo'] in ('0', '2'):  # Servicio ordinario o interno
        #   0/0x10x5/232x040x/0x6/757575/0
        # 2/0/0x10x5/232x040x/0x6/757575/0

        logging.info('Texto raw:\t\t %s', str(msg['mensaje']))

        # Recorrer los digitos del mensaje para codificar cada uno
        cipert = ''
        for _, elem in enumerate(msg['mensaje']):
            if elem not in lencript:  # si el carácter no se encuentra en la lista
                elem = re.sub(r'[^\w]', r'', unicodedata.normalize('NFKD', elem)) # pasar a unicode, quita acentos y similar
                if elem not in lencript:  #  finalmente sustituir por '#' si no existe
                    elem = '#'

            # Asignar valor de la posicion del caracter, siempre con dos digitos '00'
            cipert += str(lencript.index(elem)).zfill(2)

        logging.info('Texto cod:\t\t %s', str(cipert))

        if arg.password:
            cipert = encffx(arg, cipert, 'cod')
            logging.info('Texto ffx:\t\t %s', str(cipert))

        # Calcular novenales en base al tamaño del mensaje
        cociente = int(len(cipert) / 9)
        resto = int(len(cipert) % 9)
        msg['novenales'] = str(cociente).zfill(2) + str(resto)

        # Insertar arriadas en mensaje y borar la última si coincide
        ciperm = str(re.sub(r'(.{9})', r'\1/', cipert)).rstrip('/')

        prefijo = ''
        if msg['tipo'] == '2':
            prefijo = '2/'

        sufijo = '/' + msg['novenales'] + '/' + ciperm + '/' + msg['prioridad']

    else:
        prefijo = msg['tipo'] + '/'

        if msg['tipo'] == '3':  # Servicio de vigilancia
            # 3/0x1052/191709
            msg['prioridad'] = ''
            msg['referencia'] = ''
            sufijo = ''

        elif msg['tipo'] == '6':  # Servicio acuse de recibo
            # 6/0/0x1052/1917090x/0x
            if msg['incd'] == '0':
                msg['incd'] = '00'
            sufijo = '/' + msg['incd']

        elif msg['tipo'] == '5':  # Reanudar transmisión
            # 5/4/0x1/0x
            # 5/4/0x1/0x
            msg['horadia'] = ''
            msg['destino'] = ''
            sufijo = ''

        else:
            logging.error('Sin tipo de mensaje')
            sys.exit(-1)

    # Mensaje formateado
    msgfmt = str(prefijo + msg['prioridad'] + '/' + msg['origen'] + msg['destino'] + '/' + msg['horadia'] + msg['referencia'] + sufijo)

    # Eliminar duplicados // por campos vacíos
    msgfmt = re.sub(r'\/\/', r'/', msgfmt)

    logging.info('Mensaje raw:\t %s', msgfmt)

    # Salida final. Sustituir caracteres repetidos por x
    msg['procmsg'] = re.sub(r'(\w{1})\1', r'\1x', msgfmt)

    imprimir(arg, msg)



def zcodif_descodificar(arg, msg, lencript):
    '''descodificar mensaje'''

    # Reconstruir caracteres repetidos
    ciperm = re.sub(r'(.{1})x', r'\1\1', msg['mensaje']).replace(" ", "")

    try:
        # Extraer cabecera del mensaje (manetener en cada caso los mismos 5 grupos) - https://regex101.com/r/uxJuGZ/15
        if re.match(r'^(?:([26])?/)?([048])/(\d{3,6})/(\d{2,8})/(\d{0,3})\b', ciperm) is not None:
            # https://regex101.com/r/uxJuGZ/16
            search = re.search(r'^(?:([26])?/)?([048])/(\d{3,6})/(\d{2,8})/(\d{0,3})\b', ciperm)

        elif re.match(r'^(3)()/(\d{3,6})/(\d{3,6})()\b', ciperm) is not None:
            # https://regex101.com/r/uxJuGZ/17
            search = re.search(r'^(3)()/(\d{3,6})/(\d{3,6})()\b', ciperm)

        elif re.match(r'^(5)/([048])/(\d{3})/(\d{2})()\b', ciperm) is not None:
            # https://regex101.com/r/88Ll5g/18
            search = re.search(r'^(5)/([048])/(\d{3})/(\d{2})()\b', ciperm)

        else:
            raise Exception('Codificación de mensaje incorrecta')

        # Extraer interrupción final si la hubiera - https://regex101.com/r/N183lk/1
        if re.match(r'.*/\d+/\d+(/(\d{3})/(\d{5}))+$', ciperm) is not None:
            regfin = re.search(r'(/(\d{3})/(\d{5}))+$', ciperm)

            # Recorrer todas las interrupciones
            for i in re.findall('.{10}', regfin.group(0)):

                regint = re.search(r'/(\d{3})/(\d{5})', i)
                msg['regfin'] += '[T-' + regint.group(1) + ' '
                msg['regfin'] += regint.group(2)[:2] + ':' + regint.group(2)[2:4] + 'h '
                intrc = regint.group(2)[4:]
                if intrc == '1':
                    intrc = '1-Niebla'
                if intrc == '2':
                    intrc = '2-Ausencia'
                if intrc == '3':
                    intrc = '3-Vang.Ocupada'
                if intrc == '4':
                    intrc = '4-Avería'
                msg['regfin'] += intrc +']  '

                # Eliminar interrupción del mensaje
                ciperm = ciperm.replace(regint[0], '')

        # Procesar tipo 0 o 2. Telegrama con mensaje
        if re.match(r'^(?:2/)?[048]/\d+/\d+\/\d+\/.*[048]$', ciperm) is not None:

            msg['novenales'] = search.group(5)

            # Calcular tamaño del texto en base a los novenales
            long_nov = (int(msg['novenales'][:2]) * 9) + (int(msg['novenales'][2:]))

            # Eliminar la cabecera del preámbulo del telegrama, quitar '/' y extraer longitud del texto
            cipert = ciperm.replace(search.group(0), '').replace('/', '')[:long_nov]

            logging.info("Texto raw:\t\t %s", cipert)

            if arg.password:
                cipert = encffx(arg, cipert, 'descod')
                logging.info('Texto ffx:\t\t %s', str(cipert))

            # Comprobar integridad
            if long_nov != len(cipert):
                raise Exception('Extension mensaje incorrecta')
            else:
                # Recorrer a pares el texto y extraer la posición del carácter en la lista de códigos
                msg['procmsg'] = ''
                for i in range(0, long_nov - 1, 2):
                    msg['procmsg'] += lencript[int(cipert[i] + cipert[i+1])]

            # Asignar tipo según indicación
            if search.group(1):
                msg['tipo'] = search.group(1)
            else:
                msg['tipo'] = '0'

        # Procesar tipo 3
        elif re.match(r'^3/\d+\/\d+$', ciperm) is not None:
            msg['tipo'] = search.group(1)

        # Procesar tipo 6
        elif re.match(r'^6/[048]/\d+\/\d+\/\d{1,2}$', ciperm) is not None:
            msg['tipo'] = search.group(1)
            msg['incd'] = search.group(5)

        # Procesar tipo 5
        elif re.match(r'^5/[048]/\d+\/\d+$', ciperm) is not None:
            msg['tipo'] = search.group(1)

        else:
            raise Exception('Formato de mensaje inválido')

        # Asignar valores comunes
        msg['prioridad'] = search.group(2)
        msg['origen'] = search.group(3)[:3]
        msg['destino'] = search.group(3)[3:]

        # Según formato hora y referencia corto/largo
        if len(search.group(4)) == 2:  # referencia
            msg['horadia'] = ''
            msg['referencia'] = search.group(4)
        elif len(search.group(4)) == 3:  # horadia-breve
            msg['horadia'] = search.group(4)[:3]
            msg['referencia'] = ''
        elif len(search.group(4)) == 5:  # horadia-breve + ref
            msg['horadia'] = search.group(4)[:3]
            msg['referencia'] = search.group(4)[3:]
        elif len(search.group(4)) == 6:  # horadia-normal
            msg['horadia'] = search.group(4)[:6]
            msg['referencia'] = ''
        elif len(search.group(4)) == 8: # horadia-normal + ref
            msg['horadia'] = search.group(4)[:6]
            msg['referencia'] = search.group(4)[6:]
        else:
            msg['horadia'] = ''
            msg['referencia'] = ''

    except Exception as exp:
        logging.error('Imposible descodificar --> %s', str(exp))
        sys.exit(-1)

    imprimir(arg, msg)



def imprimir(arg, msg):
    '''salida por pantalla'''

    if arg.batch:
        print(msg['procmsg'])

    else:
        print('-' * 80)
        if msg['tipo'] == '0': print(f"Tipo:\t\t 0 - Ordinario")
        if msg['tipo'] == '2': print(f"Tipo:\t\t 2 - Servicio Interno")
        if msg['tipo'] == '3': print(f"Tipo:\t\t 3 - Vigilancia")
        if msg['tipo'] == '5': print(f"Tipo:\t\t 5 - Reanudar Transmisión")
        if msg['tipo'] == '6':
            print(f"Tipo:\t\t 6 - Acuse de recibo")
            if msg['incd'] == '00':
                print(f"Estado:\t\t 0x - Correcto")
            if msg['incd'] == '1':
                print(f"Estado:\t\t 1 - Incidencia niebla")
            if msg['incd'] == '2':
                print(f"Estado:\t\t 2 - Incidencia ausencia")
            if msg['incd'] == '3':
                print(f"Estado:\t\t 3 - Incidencia vanguardia ocupada")
            if msg['incd'] == '4':
                print(f"Estado:\t\t 4 - Incidencia avería")

        if msg['prioridad']:
            print(f"Prioridad:\t {msg['prioridad']}")
        if not msg['destino']:  # Si sólo se indica una torre
            print(f"Torre:\t\t {msg['origen']}")
        else:
            print(f"T. Origen:\t {msg['origen']}")
            print(f"T. Destino:\t {msg['destino']}")

        if len(msg['horadia']) == 3:
            fchora = int(msg['horadia'][:2])
            if fchora >= 75:
                hora = str(fchora - 75).zfill(2) + ':45'
            elif fchora >= 50:
                hora = str(fchora - 50).zfill(2) + ':30'
            elif fchora >= 25:
                hora = str(fchora - 25).zfill(2) + ':15'
            elif fchora >= 0:
                hora = str(fchora).zfill(2) + ':00'
            print(f"Hora y Día:\t {msg['horadia'][:2]} [{hora}] ?{msg['horadia'][2:]}")
        elif len(msg['horadia']) == 6:
            print(f"Hora y Día:\t {msg['horadia'][:2]}:{msg['horadia'][2:4]} {msg['horadia'][4:6]}")

        if msg['referencia']:
            print(f"Referencia:\t {msg['referencia']}")
        if msg['regfin']:
            print(f"Interrupción:\t {msg['regfin']}")
        if msg['procmsg'] is not None:
            if msg['tipo'] in ('0', '2'):
                print(f"Novenales:\t {msg['novenales'][:2]}.{msg['novenales'][2:]}")
                if arg.zcodif == 0:  # Sólo en codificación
                    print(f"Mensaje txt:\t \'{msg['mensaje']}\'")
            print('-' * 80)
            print('')
            print(f"Mensaje:\t {msg['procmsg']}")
            print('')
        print('-' * 80)



def main():
    '''Inicio'''

    # Los caracteres del mensaje se sustituyen por la posición que ocupan en la lista
    lencript = list(string.digits + string.ascii_letters + string.punctuation) + ['Ñ', 'ñ', '¿', ' ', '€', ' ']

    # Diccionario de mensaje. Valores por defecto
    msg = {'prioridad': '0', 'tipo': '0', 'origen': 1, 'destino': 52, 'horadia': None, 'referencia': 0, 'novenales': None, 'mensaje': '...', 'procmsg': None, 'incd': '00', 'regfin': ''}

    arg, msg = get_arguments(msg, lencript)

    if arg.zcodif == 0:
        zcodif_codificar(arg, msg, lencript)
    elif arg.zcodif == 1:
        zcodif_descodificar(arg, msg, lencript)
    else:
        logging.error('Fallo en la selección de tarea. Codificar / Descodificar')


if __name__ == "__main__":
    main()
